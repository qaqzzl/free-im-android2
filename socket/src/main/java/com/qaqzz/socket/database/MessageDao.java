package com.qaqzz.socket.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Chatroom_id = new Property(1, String.class, "chatroom_id", false, "CHATROOM_ID");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Message_id = new Property(3, String.class, "message_id", false, "MESSAGE_ID");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Message_code = new Property(5, int.class, "message_code", false, "MESSAGE_CODE");
        public final static Property Message_send_time = new Property(6, int.class, "message_send_time", false, "MESSAGE_SEND_TIME");
        public final static Property Message_status = new Property(7, String.class, "message_status", false, "MESSAGE_STATUS");
        public final static Property Last_send_time = new Property(8, int.class, "last_send_time", false, "LAST_SEND_TIME");
        public final static Property Ack_time = new Property(9, int.class, "ack_time", false, "ACK_TIME");
        public final static Property Retries_sum = new Property(10, int.class, "retries_sum", false, "RETRIES_SUM");
        public final static Property Is_read = new Property(11, int.class, "is_read", false, "IS_READ");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"CHATROOM_ID\" TEXT NOT NULL ," + // 1: chatroom_id
                "\"USER_ID\" TEXT NOT NULL ," + // 2: user_id
                "\"MESSAGE_ID\" TEXT NOT NULL ," + // 3: message_id
                "\"CONTENT\" TEXT NOT NULL ," + // 4: content
                "\"MESSAGE_CODE\" INTEGER NOT NULL ," + // 5: message_code
                "\"MESSAGE_SEND_TIME\" INTEGER NOT NULL ," + // 6: message_send_time
                "\"MESSAGE_STATUS\" TEXT NOT NULL ," + // 7: message_status
                "\"LAST_SEND_TIME\" INTEGER NOT NULL ," + // 8: last_send_time
                "\"ACK_TIME\" INTEGER NOT NULL ," + // 9: ack_time
                "\"RETRIES_SUM\" INTEGER NOT NULL ," + // 10: retries_sum
                "\"IS_READ\" INTEGER NOT NULL );"); // 11: is_read
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getChatroom_id());
        stmt.bindString(3, entity.getUser_id());
        stmt.bindString(4, entity.getMessage_id());
        stmt.bindString(5, entity.getContent());
        stmt.bindLong(6, entity.getMessage_code());
        stmt.bindLong(7, entity.getMessage_send_time());
        stmt.bindString(8, entity.getMessage_status());
        stmt.bindLong(9, entity.getLast_send_time());
        stmt.bindLong(10, entity.getAck_time());
        stmt.bindLong(11, entity.getRetries_sum());
        stmt.bindLong(12, entity.getIs_read());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getChatroom_id());
        stmt.bindString(3, entity.getUser_id());
        stmt.bindString(4, entity.getMessage_id());
        stmt.bindString(5, entity.getContent());
        stmt.bindLong(6, entity.getMessage_code());
        stmt.bindLong(7, entity.getMessage_send_time());
        stmt.bindString(8, entity.getMessage_status());
        stmt.bindLong(9, entity.getLast_send_time());
        stmt.bindLong(10, entity.getAck_time());
        stmt.bindLong(11, entity.getRetries_sum());
        stmt.bindLong(12, entity.getIs_read());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // chatroom_id
            cursor.getString(offset + 2), // user_id
            cursor.getString(offset + 3), // message_id
            cursor.getString(offset + 4), // content
            cursor.getInt(offset + 5), // message_code
            cursor.getInt(offset + 6), // message_send_time
            cursor.getString(offset + 7), // message_status
            cursor.getInt(offset + 8), // last_send_time
            cursor.getInt(offset + 9), // ack_time
            cursor.getInt(offset + 10), // retries_sum
            cursor.getInt(offset + 11) // is_read
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChatroom_id(cursor.getString(offset + 1));
        entity.setUser_id(cursor.getString(offset + 2));
        entity.setMessage_id(cursor.getString(offset + 3));
        entity.setContent(cursor.getString(offset + 4));
        entity.setMessage_code(cursor.getInt(offset + 5));
        entity.setMessage_send_time(cursor.getInt(offset + 6));
        entity.setMessage_status(cursor.getString(offset + 7));
        entity.setLast_send_time(cursor.getInt(offset + 8));
        entity.setAck_time(cursor.getInt(offset + 9));
        entity.setRetries_sum(cursor.getInt(offset + 10));
        entity.setIs_read(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
